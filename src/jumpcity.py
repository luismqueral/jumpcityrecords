# -*- coding: utf8 -*-

"""
jumpcity.py

Main driver. Software by Michiel Overtoom, motoom@xs4all.nl
"""

import albumart
import albumtracks
import composetrack
import os
import codecs
import constants
import datetime

def generatealbum():
    """ Generate a complete album. """

    # Start with the name and release date.
    at = albumtracks.AlbumTracks()
    while True:
        albumname, datestamp, tracks = at.generatealbum()
        albumdir = os.path.join("..", "_albums", albumname)
        if os.path.exists(albumdir): # Don't overwrite existing albums with the same name.
            continue
        break
    print "\nMaking new album '%s'" % albumname
    os.mkdir(albumdir)

    # A nice picture...
    picturefilename = albumart.rendertopng(albumname, datestamp, albumdir)
    
    # Make a description of the entire album - this is added as a comment to every track in the album.
    description = [
        u"░ jump city records, [%s]" % datestamp,
        u"░ generated by jumpcity.py",
        u"░ (https://github.com/luismqueral/jumpcityrecords)",
        u"",
        ]
    maxtracknamelen = max(len(track[0]) for track in tracks)
    for nr, track in enumerate(tracks):
        trackname, duration = track
        minutes = int(duration / 60)
        seconds = duration - minutes * 60
        padspace = " " if minutes < 10 else ""
        line = u"%02d %-*s %s%d:%02d" % (nr + 1, maxtracknamelen, trackname, padspace, minutes, seconds)
        description.append(line)
    description.extend([
        u"",
        u"░ engineered by Michiel Overtoom (http://www.michielovertoom.com/)",
        u"░ designed by Luis Queral (http://luisquer.al)",
        u"",
        u"view more at: jumpcityrecords.bandcamp.com",
        ])
    description = u"\n".join(description)
    descriptionfilename = os.path.join(albumdir, "description.txt")
    with codecs.open(descriptionfilename, "w", "utf8") as of:
        of.write(description)

    # Now compose the actual tracks.
    for nr, track in enumerate(tracks):
        trackname, duration = track
        tags = {
            "ALBUM": albumname,
            "ARTIST": u"[ jump city records ]",
            "DATE": datetime.date.today().isoformat(),
            "TITLE": trackname,
            "DESCRIPTION": descriptionfilename,
            "GENRE": u"Musique Concrète",
            "COMPOSER": u"jumpcity.py",
            "TRACKNUMBER": nr + 1,
            "TRACKTOTAL": len(tracks),    
            }
        # Catch exception and re-generate track in case of error.
        while True:
            try:
                trackfilename = composetrack.generate(duration, albumname, trackname, picturefilename, tags)
            except ValueError, e:
                print "ERROR:", e
                continue
            break
        # TODO: What about problematic characters in filenames, eg. ?, /, \, :
        destname = u"%02d %s - %s.%s" % (nr + 1, albumname, trackname, constants.OUTPUTFORMAT)
        print "DESTNAME:", destname
        os.rename(trackfilename, os.path.join(albumdir, destname))

    # Clean up
    os.unlink(descriptionfilename)
    print
    

if __name__ == "__main__":
    for i in xrange(20):
        name = generatealbum()
